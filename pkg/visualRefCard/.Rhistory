curve(chisq(x, 2))
curve(dchisq(x, 2))
curve(dchisq(x, 2), xlim=c(0,10))
?curve
?chisq.test
chisq.test
curve(pchisq(x, 2, lower.tail = FALSE))
curve(pchisq(x, 2, lower.tail = FALSE), xlim=0,10)
curve(pchisq(x, 2, lower.tail = FALSE), xlim=c(0,10))
curve(pchisq(x, 2, lower.tail = T), add=T, xlim=c(0,10))
curve(pchisq(x, 2, lower.tail = FALSE), xlim=c(0,10), main="cranberry de supermarché vs cranberry pharmaceutique: modélisation", xlab="temps", ylab="efficacité")#
curve(pchisq(x, 2, lower.tail = T), add=T, xlim=c(0,10), lty=2)
?legend
legend(1,1, c("Cranberry de pharmacie", "Cranberry de supermarché"), lty=(1,2))
legend(1,1, c("Cranberry de pharmacie", "Cranberry de supermarché"), lty=c(1,2))
dev2bitmap("cranberrySurvey.png")
png("cranberrySurvey.png");#
curve(pchisq(x, 2, lower.tail = FALSE), xlim=c(0,10), main="cranberry de supermarché vs cranberry pharmaceutique: modélisation", xlab="temps", ylab="efficacité")#
curve(pchisq(x, 2, lower.tail = T), add=T, xlim=c(0,10), lty=2)#
#
legend(1,1, c("Cranberry de pharmacie", "Cranberry de supermarché"), lty=c(1,2))#
dev.off();
library(rjava)
library(rJava)
help(package=rJava)
?J
J("java.lang.String")
.jinit()
J("java.lang.String")
J("java.lang.String", "foo")
?J
s <- new(J("java.lang.String"), "Hello")
s
s$toString
?J
s$toString()
pipeline(list(one=))
help(package="rJava")
?.jaddClassPath
.jclassPath
.jclassPath()
J()
help(package="rJava")
?.jnew
?J
v <- c("bleu", "rouge", "vert", "bleu", "vert", "bleu")
factor(v)
f <- factor(v)
v
?factor
?tapply
?by
?sweep
?tapply
library(igraph)
igraph.par
igraph.par()
library(rJava)
.jinit()
.jaddClassPath()
?file()
data <- read.table( file.choose(), sep=",");
?url
?file.path
?Sys.getenv
system.file(package = "session")
system.file(package = "igraph")
?file.path
system.file(package = "igraph")
?J
.jaddClassPath("/Users/sylvainloiseau/Downloads/CR/lib/");
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
p <- list(remove.element("del", T))
traceback()
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
.jaddClassPath("/Users/sylvainloiseau/Downloads/CR/lib/CR.jar");
p <- list(remove.element("del", T))
?.jcall
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
p <- list(remove.element("del", T))
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
p <- list(remove.element("del", T))
?.jcall
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
p <- list(remove.element("del", T))
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
p <- list(remove.element("del", T))
.cr.prefix <- "tei.cr.filters.";
  qualified.className <- paste(.cr.prefix, "RemoveElement", sep="");#
  f <- new(J(qualified.className));#
  print(f);#
  print(qualified.className);
.jmethods(f,"initRules")
?jcall(f, , "initRules", 1)
.jcall(f, , "initRules", 1)
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
.jcall(f, , "initRules", 1)
f <- .jnew(qualified.className))
f <- .jnew(qualified.className)
.jcall(f, , "initRules", 1)
f <- .jnew(qualified.className)
.jmethods(f,"initRules")
?.jcall(f, , "initRules", 1)
s <- .jnew("java/lang/String", "Hello World!")
.jcall(s,"I","length")
.jcall(s,"I","indexOf","World")
.jcall(s,"V","indexOf","World")
.jmethods(f,"initRules")
.jmethods(s,"indexOf")
?.jcast
.jcall(s,"V","indexOf","World")
.jcall(s,"I","indexOf","World")
.jcall(s,"I","indexOf","World", "World")
class(1)
mode(1)
class(1)
class(integer(1))
class(double(1))
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
.jcall(f, , "initRules", integer(1))
f <- remove.element("del" T)
f <- remove.element("del", T)
logical(T)
mode(logical(T))
?logical
logical(T, F)
logical(c(T, F))
?logical
.jmethods(f,"initRules")
.jmethods(f,"setElxpath")
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
f <- remove.element("del", T)
o<- elxpath.stringvalue.occurrence.pattern(f, "foo", "bar")
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
o<- elxpath.stringvalue.occurrence.pattern(f, "foo", "bar")
f
f <- remove.element("del", T)
o<- elxpath.stringvalue.occurrence.pattern(f, "foo", "bar")
f
o<- elxpath.stringvalue.occurrence.pattern(f, "foo", "bar")
f
f <- remove.element("del", T)
f
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
f <- remove.element("del", T)
f
o<- elxpath.stringvalue.occurrence.pattern(f, "foo", "bar")
?.jmethods
.jconstructors("tei.cr.utils.sax.occurrence.ElxpathStringValueOccurrencePattern")
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
library(rJava)
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
remove <- remove.element("del", TRUE)
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
f
source("~/workspace/corpusreader/src/main/R/corpusreader.R")
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
?.jcast
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
.jmethods("tei.cr.pipeline.Pipeline")
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
l <- list(1, 2)
for (i in l) print(i)
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
remove
o
e
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
.jmethods("tei.cr.filters.ExtractPhenomena")
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
.jmethods("tei.cr.pipeline.Pipeline")
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
?.jcall
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
?.jcall
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
traceback()
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
?.jcall
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
.jmethods("tei.cr.component.phenomenaStream.PhenomenaStream")
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
.jmethods("tei.cr.component.phenomenaStream.PhenomenaStream")
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
?.jcall
?sys.env
?system
?Sys.getenv()
Sys.getenv()
opt
optim
?optim
?character
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
length(v)
source("/Users/sylvainloiseau/workspace/corpusreader/src/main/R/corpusreader.R")
  if (length(expr) != 1) {#
    stop("expr must be a characters string of length 1");#
  }
library(grid);
debuging <- FALSE;
source("/Users/sylvainloiseau/workspace/drawExpression/pkg/R/drawExpression.R")
drawExpression("c(1,2)")
source("/Users/sylvainloiseau/workspace/drawExpression/pkg/R/drawExpression.R")
drawExpression("c(1,2)")
source("/Users/sylvainloiseau/workspace/drawExpression/pkg/R/drawExpression.R")
drawExpression("c(1,2)")
source("/Users/sylvainloiseau/workspace/drawExpression/pkg/R/drawExpression.R")
drawExpression("c(1,2)")
source("/Users/sylvainloiseau/workspace/drawExpression/pkg/R/drawExpression.R")
drawExpression("c(1,2)")
library(drawExpression)
drawExpression("c(1,2)")
library(drawExpression)
drawExpression("c(1,2)")
dev.cur()
library(drawExpression)
drawExpression("c(1,2)")
library(drawExpression)
drawExpression("c(1,2)")
library(drawExpression)
drawExpression("c(1,2)")
library(drawExpression)
drawExpression("c(1,2)")
drawExpression("c(1,2)", filename="test.pdf")
source("/Users/sylvainloiseau/workspace/drawExpression/pkg/R/drawExpression.R")
drawExpression("tapply(c(1,2), c(1,2), sum)", filename="test.pdf")
traceback
traceback()
drawExpression("tapply(c(1,2), c(1,2), sum)", filename="test.pdf")
tapply(1:3, c(1,1,2))
tapply(1:3, c(1,1,2), sum)
table(c(1:4, 2:5, 4:7))
#
plotR("table(c(1:4, 2:5, 4:7))", "table.pdf");
setwd(""/Users/sylvainloiseau/workspace/drawExpression/pkg/visualRefCard)
setwd("/Users/sylvainloiseau/workspace/drawExpression/pkg/visualRefCard)")
setwd("/Users/sylvainloiseau/workspace/drawExpression/pkg/visualRefCard")
#library(visualR);#
source("../R/drawExpression.R");#
#
# anatomy of a vector#
#
plotR <- function(expr, file) {#
  par(mar=c(0,0,0,0));#
  drawExpression(expr, filename=file);#
}
table(c(1:4, 2:5, 4:7))
#
plotR("table(c(1:4, 2:5, 4:7))", "table.pdf");
#library(visualR);#
source("../R/drawExpression.R");#
#
# anatomy of a vector#
#
plotR <- function(expr, file) {#
  par(mar=c(0,0,0,0));#
  drawExpression(expr, filename=file);#
}
tapply(1:3, c(1,1,2), sum)
plotR("tapply(1:3, c(1,1,2), sum)")
traceback()
as.character(sum)
as.character(name(sum))
as.character(as.name(sum))
?name
as.symbol(sum)
names(sum)
?function
?function()
??function
help("function")
?symbol
?symbole
?name
is.symbole(sum)
is.symbol(sum)
as.symbol(sum)
as.character(sum)
